// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	studentFieldNames          = builder.RawFieldNames(&Student{})
	studentRows                = strings.Join(studentFieldNames, ",")
	studentRowsExpectAutoSet   = strings.Join(stringx.Remove(studentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	studentRowsWithPlaceHolder = strings.Join(stringx.Remove(studentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTestStudentIdPrefix = "cache:test:student:id:"
)

type (
	studentModel interface {
		Insert(ctx context.Context, data *Student) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Student, error)
		Update(ctx context.Context, data *Student) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStudentModel struct {
		sqlc.CachedConn
		table string
	}

	Student struct {
		Id   int64          `db:"id"`
		Name string         `db:"name"`
		Age  sql.NullInt64  `db:"age"`
		City sql.NullString `db:"city"`
	}
)

func newStudentModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultStudentModel {
	return &defaultStudentModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`student`",
	}
}

func (m *defaultStudentModel) Delete(ctx context.Context, id int64) error {
	testStudentIdKey := fmt.Sprintf("%s%v", cacheTestStudentIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, testStudentIdKey)
	return err
}

func (m *defaultStudentModel) FindOne(ctx context.Context, id int64) (*Student, error) {
	testStudentIdKey := fmt.Sprintf("%s%v", cacheTestStudentIdPrefix, id)
	var resp Student
	err := m.QueryRowCtx(ctx, &resp, testStudentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", studentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStudentModel) Insert(ctx context.Context, data *Student) (sql.Result, error) {
	testStudentIdKey := fmt.Sprintf("%s%v", cacheTestStudentIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, studentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Age, data.City)
	}, testStudentIdKey)
	return ret, err
}

func (m *defaultStudentModel) Update(ctx context.Context, data *Student) error {
	testStudentIdKey := fmt.Sprintf("%s%v", cacheTestStudentIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, studentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Age, data.City, data.Id)
	}, testStudentIdKey)
	return err
}

func (m *defaultStudentModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTestStudentIdPrefix, primary)
}

func (m *defaultStudentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", studentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStudentModel) tableName() string {
	return m.table
}
